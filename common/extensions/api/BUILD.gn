import("//presearch/components/binance/browser/buildflags/buildflags.gni")
import("//presearch/components/presearch_together/buildflags/buildflags.gni")
import("//presearch/components/presearch_wallet/common/buildflags/buildflags.gni")
import("//presearch/components/crypto_dot_com/browser/buildflags/buildflags.gni")
import("//presearch/components/gemini/browser/buildflags/buildflags.gni")
import("//presearch/components/ipfs/buildflags/buildflags.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/json_schema_compiler/json_features.gni")
import("//tools/json_schema_compiler/json_schema_api.gni")
json_features("api_features") {
  feature_type = "APIFeature"
  method_name = "AddPresearchAPIFeatures"
  sources = [
    "//chrome/common/extensions/api/_api_features.json",
    "//extensions/common/api/_api_features.json",
    "_api_features.json",
  ]

  if (presearch_wallet_enabled) {
    sources += [ "_presearch_wallet_api_features.json" ]
  }

  if (ipfs_enabled) {
    sources += [ "_ipfs_api_features.json" ]
  }

  if (binance_enabled) {
    sources += [ "_binance_api_features.json" ]
  }

  if (gemini_enabled) {
    sources += [ "_gemini_api_features.json" ]
  }

  if (crypto_dot_com_enabled) {
    sources += [ "_crypto_dot_com_features.json" ]
  }

  if (presearch_together_enabled) {
    sources += [ "_presearch_together_api_features.json" ]
  }
}

json_features("permission_features") {
  feature_type = "PermissionFeature"
  method_name = "AddPresearchPermissionFeatures"
  sources = [
    "//chrome/common/extensions/api/_permission_features.json",
    "//extensions/common/api/_permission_features.json",
    "_permission_features.json",
  ]
}

json_features("manifest_features") {
  feature_type = "ManifestFeature"
  method_name = "AddPresearchManifestFeatures"
  sources = [
    "//chrome/common/extensions/api/_manifest_features.json",
    "//extensions/common/api/_manifest_features.json",
    "_manifest_features.json",
  ]
}

json_features("behavior_features") {
  feature_type = "BehaviorFeature"
  method_name = "AddPresearchBehaviorFeatures"
  sources = [ "//extensions/common/api/_behavior_features.json" ]
}

presearch_extensions_api_schema_sources = [
  "presearch_rewards.json",
  "presearch_shields.json",
  "presearch_theme.json",
  "presearch_today.json",
  "greaselion.json",
  "rewards_notifications.json",
]

if (ipfs_enabled) {
  presearch_extensions_api_schema_sources += [ "ipfs.json" ]
}

if (presearch_wallet_enabled) {
  presearch_extensions_api_schema_sources += [ "presearch_wallet.json" ]
}

if (binance_enabled) {
  presearch_extensions_api_schema_sources += [ "binance.json" ]
}

if (gemini_enabled) {
  presearch_extensions_api_schema_sources += [ "gemini.json" ]
}

if (crypto_dot_com_enabled) {
  presearch_extensions_api_schema_sources += [ "crypto_dot_com.json" ]
}

if (presearch_together_enabled) {
  presearch_extensions_api_schema_sources += [ "presearch_together.json" ]
}

presearch_extensions_api_uncompiled_sources = []
presearch_extensions_api_root_namespace = "extensions::api::%(namespace)s"
presearch_extensions_api_schema_include_rules =
    "//presearch/common/extensions/api:extensions::api::%(namespace)s"

presearch_extensions_api_deps = [
  ":api_features",
  ":behavior_features",
  ":manifest_features",
  ":permission_features",
  ":resources",
  "//chrome/common/extensions/api",
  "//extensions/common/api",
  "//skia",
]

grit("resources") {
  source = "presearch_api_resources.grd"
  outputs = [
    "grit/presearch_api_resources.h",
    "presearch_api_resources.pak",
  ]
  resource_ids = "//presearch/browser/resources/resource_ids"
}

function_registration("generated_api_registration") {
  sources = presearch_extensions_api_schema_sources
  impl_dir = "//presearch/common/extensions/api/"
  bundle_name = "Presearch"
  root_namespace = presearch_extensions_api_root_namespace

  deps = [ "//extensions/common" ]

  visibility = [ ":api" ]
}

generated_json_strings("generated_api_json_strings") {
  sources = presearch_extensions_api_schema_sources +
            presearch_extensions_api_uncompiled_sources

  configs = [ "//build/config:precompiled_headers" ]
  bundle_name = "Presearch"
  schema_include_rules = presearch_extensions_api_schema_include_rules

  root_namespace = presearch_extensions_api_root_namespace
  deps = presearch_extensions_api_deps

  visibility = [ ":api" ]
}

generated_types("generated_api_types") {
  sources = presearch_extensions_api_schema_sources
  configs = [ "//build/config:precompiled_headers" ]
  schema_include_rules = presearch_extensions_api_schema_include_rules

  root_namespace = presearch_extensions_api_root_namespace
  deps = presearch_extensions_api_deps
  visibility = [ ":api" ]
}

# Public Targets

group("api") {
  public_deps = [
    ":generated_api_json_strings",
    ":generated_api_registration",
    ":generated_api_types",
  ]
}
